// to_check_quad_pts : for all the pairs (D,N) for which we are unsure whether
// X_0^D(N) is bielliptic over Q (via an Atkin--Lehner involution), we list all
// of the quadratic CM points on X_0^D(N). This should be helpful in that
// a genus one quotient by an (Atkin--Lehner) involution would be an elliptic curve
// over Q if and only if there is a quadratic point on X_0^D(N) with image a rational
// point on the quotient, and the CM points are the obvious quadratic points we have
// access to 

// format: an element of to_check_quad_pts is of form [* D, N, quad_pts *]
// where quad_pts is a sequence which consists of two sequences -- the second is for 
// points with residue field a ring class field, and the former for points with residue field
// a subfield of a ring class field cut out by an involution of a certain type. Each of these
// two sequences has elements of the form [d_K,f,f',number] where [f,d_K] is the order
// of the CM point, f' is the conductor corresponding to the residue field, and number is the number
// of points with that same residue field (and ramification index w.r.t. the map
// to trivial level, which we don't track here)

to_check_quad_pts := [* [* 6, 5, [* [* *], [*
    [ -4, 1, 1, 4 ],
    [ -4, 2, 2, 4 ],
    [ -19, 1, 1, 8 ]
*] *] *], [* 6, 7, [* [* *], [*
    [ -3, 1, 1, 4 ],
    [ -3, 2, 2, 4 ],
    [ -3, 3, 3, 4 ],
    [ -19, 1, 1, 8 ]
*] *] *], [* 6, 11, [* [* *], [*
    [ -19, 1, 1, 8 ],
    [ -43, 1, 1, 8 ]
*] *] *], [* 6, 13, [* [* *], [*
    [ -3, 1, 1, 4 ],
    [ -3, 2, 2, 4 ],
    [ -3, 3, 3, 4 ],
    [ -4, 1, 1, 4 ],
    [ -4, 2, 2, 4 ],
    [ -43, 1, 1, 8 ]
*] *] *], [* 6, 17, [* [* *], [*
    [ -4, 1, 1, 4 ],
    [ -4, 2, 2, 4 ],
    [ -19, 1, 1, 8 ],
    [ -43, 1, 1, 8 ],
    [ -67, 1, 1, 8 ]
*] *] *], [* 6, 19, [* [* *], [*
    [ -3, 1, 1, 4 ],
    [ -3, 2, 2, 4 ],
    [ -3, 3, 3, 4 ],
    [ -19, 1, 1, 4 ],
    [ -67, 1, 1, 8 ]
*] *] *], [* 6, 23, [* [* *], [*
    [ -19, 1, 1, 8 ],
    [ -43, 1, 1, 8 ],
    [ -67, 1, 1, 8 ]
*] *] *], [* 6, 41, [* [* *], [*
    [ -4, 1, 1, 4 ],
    [ -4, 2, 2, 4 ],
    [ -43, 1, 1, 8 ],
    [ -163, 1, 1, 8 ]
*] *] *], [* 6, 43, [* [* *], [*
    [ -3, 1, 1, 4 ],
    [ -3, 2, 2, 4 ],
    [ -3, 3, 3, 4 ],
    [ -19, 1, 1, 8 ],
    [ -43, 1, 1, 4 ],
    [ -163, 1, 1, 8 ]
*] *] *], [* 6, 47, [* [* *], [*
    [ -19, 1, 1, 8 ],
    [ -43, 1, 1, 8 ],
    [ -67, 1, 1, 8 ],
    [ -163, 1, 1, 8 ]
*] *] *], [* 6, 71, [* [* *], [*
    [ -67, 1, 1, 8 ],
    [ -163, 1, 1, 8 ]
*] *] *], [* 10, 3, [* [* *], [*
    [ -3, 1, 1, 4 ],
    [ -3, 1, 3, 4 ],
    [ -3, 2, 2, 4 ],
    [ -3, 3, 3, 4 ],
    [ -8, 1, 1, 4 ]
*] *] *], [* 10, 7, [* [* *], [*
    [ -3, 1, 1, 8 ],
    [ -3, 2, 2, 8 ],
    [ -3, 3, 3, 8 ]
*] *] *], [* 10, 13, [* [* *], [*
    [ -3, 1, 1, 8 ],
    [ -3, 2, 2, 8 ],
    [ -3, 3, 3, 8 ],
    [ -43, 1, 1, 8 ]
*] *] *], [* 10, 17, [* [* *], [*
    [ -8, 1, 1, 4 ],
    [ -43, 1, 1, 8 ],
    [ -67, 1, 1, 8 ]
*] *] *], [* 10, 29, [* [* *], [*
    [ -67, 1, 1, 8 ]
*] *] *], [* 10, 31, [* [* *], [*
    [ -3, 1, 1, 8 ],
    [ -3, 2, 2, 8 ],
    [ -3, 3, 3, 8 ],
    [ -43, 1, 1, 8 ]
*] *] *], [* 14, 3, [* [* *], [*
    [ -8, 1, 1, 4 ],
    [ -11, 1, 1, 8 ]
*] *] *], [* 14, 5, [* [* *], [*
    [ -4, 1, 1, 4 ],
    [ -4, 2, 2, 4 ],
    [ -11, 1, 1, 8 ]
*] *] *], [* 14, 13, [* [* *], [*
    [ -4, 1, 1, 4 ],
    [ -4, 2, 2, 4 ],
    [ -43, 1, 1, 8 ]
*] *] *], [* 14, 19, [* [* *], [*
    [ -8, 1, 1, 4 ],
    [ -67, 1, 1, 8 ]
*] *] *], [* 15, 2, [* [* *], [*
    [ -3, 1, 2, 2 ],
    [ -3, 2, 2, 2 ],
    [ -7, 1, 1, 8 ],
    [ -7, 1, 2, 4 ],
    [ -7, 2, 2, 4 ]
*] *] *], [* 15, 7, [* [* *], [*
    [ -3, 1, 1, 4 ],
    [ -3, 2, 2, 4 ],
    [ -3, 3, 3, 4 ],
    [ -7, 1, 1, 4 ],
    [ -7, 2, 2, 4 ]
*] *] *], [* 15, 11, [* [* *], [*
    [ -7, 1, 1, 8 ],
    [ -7, 2, 2, 8 ],
    [ -43, 1, 1, 8 ]
*] *] *], [* 15, 13, [* [* *], [*
    [ -3, 1, 1, 4 ],
    [ -3, 2, 2, 4 ],
    [ -3, 3, 3, 4 ],
    [ -43, 1, 1, 8 ]
*] *] *], [* 15, 17, [* [* *], [*
    [ -43, 1, 1, 8 ],
    [ -67, 1, 1, 8 ]
*] *] *], [* 21, 2, [* [* *], [*
    [ -4, 1, 1, 4 ],
    [ -4, 1, 2, 4 ],
    [ -4, 2, 2, 4 ],
    [ -7, 1, 1, 4 ],
    [ -7, 1, 2, 2 ],
    [ -7, 2, 2, 2 ]
*] *] *], [* 21, 5, [* [* *], [*
    [ -4, 1, 1, 8 ],
    [ -4, 2, 2, 8 ]
*] *] *], [* 21, 11, [* [* *], [*
    [ -7, 1, 1, 4 ],
    [ -7, 2, 2, 4 ],
    [ -43, 1, 1, 8 ]
*] *] *], [* 22, 3, [* [* *], [*
    [ -3, 1, 1, 4 ],
    [ -3, 1, 3, 4 ],
    [ -3, 2, 2, 4 ],
    [ -3, 3, 3, 4 ],
    [ -11, 1, 1, 4 ]
*] *] *], [* 22, 7, [* [* *], [*
    [ -3, 1, 1, 8 ],
    [ -3, 2, 2, 8 ],
    [ -3, 3, 3, 8 ]
*] *] *], [* 22, 17, [* [* *], [*
    [ -4, 1, 1, 4 ],
    [ -4, 2, 2, 4 ],
    [ -67, 1, 1, 8 ]
*] *] *], [* 26, 5, [* [* *], [*
    [ -11, 1, 1, 8 ],
    [ -19, 1, 1, 8 ]
*] *] *], [* 33, 2, [* [* *], [*
    [ -3, 1, 2, 2 ],
    [ -3, 2, 2, 2 ],
    [ -4, 1, 1, 4 ],
    [ -4, 1, 2, 4 ],
    [ -4, 2, 2, 4 ]
*] *] *], [* 33, 5, [* [* *], [*
    [ -4, 1, 1, 8 ],
    [ -4, 2, 2, 8 ]
*] *] *], [* 33, 7, [* [* *], [*
    [ -3, 1, 1, 4 ],
    [ -3, 2, 2, 4 ],
    [ -3, 3, 3, 4 ]
*] *] *], [* 34, 3, [* [* *], [*
    [ -3, 1, 1, 4 ],
    [ -3, 1, 3, 4 ],
    [ -3, 2, 2, 4 ],
    [ -3, 3, 3, 4 ],
    [ -11, 1, 1, 8 ]
*] *] *], [* 35, 2, [* [* *], [*
    [ -7, 1, 1, 4 ],
    [ -7, 1, 2, 2 ],
    [ -7, 2, 2, 2 ],
    [ -8, 1, 1, 4 ]
*] *] *], [* 35, 3, [* [* *], [*
    [ -8, 1, 1, 8 ]
*] *] *], [* 38, 3, [* [* *], [*
    [ -11, 1, 1, 8 ]
*] *] *], [* 46, 5, [* [* *], [*
    [ -4, 1, 1, 4 ],
    [ -4, 2, 2, 4 ]
*] *] *] *];










